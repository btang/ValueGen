module ValueGenTest.CodeGeneration.ObjC.Header.HeaderGeneratorTests where

import Test.Framework.Providers.API
import Test.Framework.Providers.HUnit
import Test.HUnit

import Text.Printf

import ValueGen.CodeGeneration.ObjC.Header.HeaderGenerator

import ValueGen.Model.Comment
import ValueGen.Model.Import
import ValueGen.Model.PrimitiveProperty
import ValueGen.Model.ObjectProperty
import ValueGen.Model.ValueObject
import ValueGen.Model.ValueObjectComponent
import ValueGen.Model.ValueObjectExtension

tests = testGroup "HeaderGeneratorTests tests" [
  testGenerateHeaderWithNoExtensions,
  testGenerateHeaderWithOneExtension,
  testGenerateHeaderWithTwoExtensions
  ]

_valueObjectWithExtensions :: [ValueObjectExtension] -> ValueObject
_valueObjectWithExtensions valueObjectExtensions = ValueObject {
  ValueGen.Model.ValueObject.name = "MyObject",
  extensions = valueObjectExtensions,
  imports = [
    Import {library = "LibraryA", component = "ComponentA"},
    Import {library = "", component = "ComponentB"}
  ],
  comments = [Comment {text = " Comment 1"}, Comment {text = " Comment 2"}],
  components = [
    CommentComponent (Comment {text = " A string"}),
    ObjectPropertyComponent (ObjectProperty {objectType = "NSString", ValueGen.Model.ObjectProperty.name = "someString"}),
    CommentComponent (Comment {text = " An int"}),
    PrimitivePropertyComponent (PrimitiveProperty {primitiveType = "NSUInteger", ValueGen.Model.PrimitiveProperty.name = "someInt"})
  ]
  }

_expectedHeaderWithProtocolConformance :: String -> [String]
_expectedHeaderWithProtocolConformance protocolConformance = [
  "//",
  "// MyObject.h",
  "// Generated by ValueGen",
  "//",
  "",
  "#import <Foundation/Foundation.h>",
  "",
  "#import <LibraryA/ComponentA.h>",
  "#import \"ComponentB.h\"",
  "",
  "// Comment 1",
  "// Comment 2",
  printf "@interface MyObject : NSObject%s" protocolConformance,
  "",
  "// A string",
  "@property (nonatomic, readonly, strong) NSString *someString;",
  "// An int",
  "@property (nonatomic, readonly, assign) NSUInteger someInt;",
  "",
  "- (instancetype)initWithSomeString:(NSString *)someString someInt:(NSUInteger)someInt;",
  "",
  "@end"
  ]

testGenerateHeaderWithNoExtensions = testCase "Test generating a standard header with no extensions" (do
  assertEqual "Header should be equal" 
    (_expectedHeaderWithProtocolConformance "")
    (generateHeader (_valueObjectWithExtensions []))
  )

testGenerateHeaderWithOneExtension = testCase "Test generating a standard header with one extension" (do
  assertEqual "Header should be equal" 
    (_expectedHeaderWithProtocolConformance " <NSCopying>")
    (generateHeader (_valueObjectWithExtensions [Copying]))
  )

testGenerateHeaderWithTwoExtensions = testCase "Test generating a standard header with two extensions" (do
  assertEqual "Header should be equal" 
    (_expectedHeaderWithProtocolConformance " <NSCopying, NSCoding>")
    (generateHeader (_valueObjectWithExtensions [Copying, Coding]))
  )
