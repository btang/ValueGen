module ValueGen.CodeGeneration.ObjC.Implementation.ImplementationGenerator where

import Data.List

import Text.Printf

import ValueGen.Model.ValueObject
import ValueGen.Model.ValueObjectExtension

import ValueGen.CodeGeneration.ObjC.Implementation.ExtensionImplementationGenerator
import ValueGen.CodeGeneration.ObjC.Implementation.HashImplementationGenerator
import ValueGen.CodeGeneration.ObjC.Implementation.InitImplementationGenerator
import ValueGen.CodeGeneration.ObjC.Implementation.IsEqualImplementationGenerator

generateImplementation :: ValueObject -> [String]
generateImplementation valueObject = 
  concat [
    _generateHeaderInfo valueObject,
    [""],
    _generateImplementationStart valueObject,
    [""],
    generateInitImplementation valueObject,
    [""],
    generateIsEqualImplementation valueObject,
    [""],
    generateHashImplementation valueObject,
    [""],
    _generateExtensionImplementations valueObject (valueObjectExtensions valueObject),
    _generateImplementationEnd
  ]

_generateHeaderInfo :: ValueObject -> [String]
_generateHeaderInfo valueObject = 
  concat [
    ["//"],
    [(printf "// %s.m" (valueObjectName valueObject))],
    ["// Generated by ValueGen"],
    ["//"],
    [""],
    [printf "#import \"%s.h\"" (valueObjectName valueObject)]
  ]

_generateImplementationStart :: ValueObject -> [String]
_generateImplementationStart valueObject = [printf "@implementation %s" (valueObjectName valueObject)]

_generateExtensionImplementations :: ValueObject -> [ValueObjectExtension] -> [String]
_generateExtensionImplementations valueObject (x:xs) = 
  foldr
    (\extension acc -> concat [(generateExtensionImplementation valueObject extension), [""], acc])
    []
    (x:xs)

_generateExtensionImplementations valueObject [] = []

_generateImplementationEnd :: [String]
_generateImplementationEnd = ["@end"]
